import sric::*;
import waseGraphics::*;
import cstd::*;

struct Spinner : Widget, PropertyAnimTarget
{
    var items : DArray$<String>;
    readonly var selIndex : Int = -1;
    var onSelect: fun(i: Int);
    //@Transient
    protected var offsetIndex : Float = 0f;
    var rowHeight : Int = 60;
    
    fun setSelIndex(val: Int, fire: Bool = true) {
      offsetIndex = val;
      if (selIndex == val) return;

      if (onSelect != null && fire) {
        onSelect(val);
      }
      selIndex = val;
      offsetIndex = val;
      if (fire) {
        eventListeners.fire(EventType::SelectChanged, this);
      }
    }

    fun new() {
        layout.width = Layout::wrapContent;
        padding = Insets { .initAll(20); };
        focusable = true;
        dragAware = true;
        style = "Spinner";
    }
    
    protected override fun prefContentSize(g: &Graphics, hintsWidth :Int= -1,  hintsHeight :Int= -1): Size {
        var w = (200);
        var h = (rowHeight)*4;
        return Size{.w = w; .h = h; };
    }
    
    private fun endMove() {
        var i = round(offsetIndex) as Int;
        if (i >= items.size()) i = items.size()-1;
        else if (i < 0) i = 0;
        setSelIndex(i);
        this.repaint();
    }
    
    protected override fun onDrag(e: &GestureEvent) {
        super.onDrag(e);
        if (e.consumed) return;
        
        if (e.type == GestureEvent::drag) {
            var r = e.deltaY/(rowHeight as Float);
            var t = offsetIndex - r;
            offsetIndex = t;
            e.consumed = true;
            this.repaint();
        }
        else if (e.type == GestureEvent::drop) {
            if (offsetIndex >= items.size() || offsetIndex < 0.0) {
                endMove();
                return;
            }
            if (fabs(e.speedY) < 0.1) {
                endMove();
                return;
            }
            
            var toIndex = offsetIndex-((e.speedY as Float) * 4);
            if (toIndex >= items.size()) toIndex = items.size() as Float;
            else if (toIndex < 0.0) toIndex = 0.0;
            
            //var self_ = this;
            var anim = new Animation {
                .duration = 500;
                .add(new PropertyAnimChannel {
                  .target = this;
                  .from = offsetIndex; .to = toIndex;
                });
            };
            anim.whenDone = fun() {
                this.endMove();
            };
            var _anim = anim as *Animation;
            this.getRootView().animManager.add(move anim);
            _anim.start();
            this.repaint();
        }
    }

    override fun onUpdateAnim(v: Float32, field: Int) {
        this.offsetIndex = v;
    }
}