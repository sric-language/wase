import sric::*;
import waseGraphics::*;

virtual struct TreeStyle : WidgetStyle
{
  var dropColor : Color = Color { .rgba = 0x807455ff; };
  
  fun new() {
    background = Color { .rgba = 0xe9e9e9ff; };
  }
  
  override fun doPaint(widget: * Widget , g:& Graphics)
  {
    var tree = widget as * TreeView;
    var start = tree.offsetY / tree.rowHeight;
    var topOffset = tree.offsetY - (start * tree.rowHeight);
    
    g.setFont(font);
    g.setFontSize(fontSize);

    var metric: FontMetrics;
    g.fontMetrics(metric);
    //var lineh = metric.height;

    var fontOffset = metric.ascent as Int;
    var top = widget.paddingTop();
    var left = widget.paddingLeft();
    var bottom = (widget.padding.bottom);
    
    //g.brush = Color.red
    //g.fillRect(widget.x, widget.y, widget.width, widget.height)

    g.setColor(fontColor);
    var y = -topOffset + top;
    var bottomLine = tree.height - bottom;
    var treeX = - tree.offsetX + left;
    for (var i = start; i< tree.items.size(); ++i)
    {
      if (i >= 0) {
        var x = tree.items[i].level * (tree.indent) + treeX;
        drawItem(g, tree.items[i], tree, treeX, x, y, fontOffset);
      }
      y += tree.rowHeight;
      if (y > bottomLine) {
//        echo("topOffset$topOffset")
        break;
      }
    }
  }

  protected virtual fun drawItem(g:&Graphics , item:&TreeItem 
    , tree:*TreeView , treeX:Int , itemX:Int , itemY:Int , fontOffset:Int )
  {
    //backgound
    if (item.node == tree.selectedItem) {
       g.setColor(background);
       g.fillRect(treeX, itemY, tree.contentWidth(), tree.rowHeight);
       g.setColor(fontColor);
    }
    else if (item.node == tree.dragDropItem) {
       g.setColor(dropColor);
       g.fillRect(treeX, itemY, tree.contentWidth(), tree.rowHeight);
       g.setColor(fontColor);
    }

    //text
    var text = item.text();
    if (item.hasChildren()) {
      if (item.expanded) text = asStr("- ") + text;
      else text = asStr("+ ") + text;
      g.drawText(itemX, itemY+fontOffset, text.c_str(), text.size());
    } else {
      text =  asStr("  ")+text;
      g.drawText(itemX, itemY+fontOffset, text.c_str(), text.size());
    }
  }
}