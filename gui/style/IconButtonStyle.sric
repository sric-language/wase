
import sric::*;
import waseGraphics::*;

struct IconButtonStyle : WidgetStyle
{
  var selectedColor: Color = Color { .rgba = 0xe9e9e9ff; };
  
  fun new() {
    background = Color { .rgba = 0xf2f2f2ff; };
  }

  fun drawIcon(widget: *Widget , g:& Graphics, icon: *Image, iconSize: Size, iconPosition: Direction) {
      if (!icon.isReady()) {
        return;
      }
      var src = Rect {.x = 0 ; .y = 0; .w = icon.width(); .h = icon.height(); };
      var size: Size = uninit;
      if (iconSize.w == 0 && iconSize.h == 0) {
        size.w = icon.width();
        size.h = icon.height();
      }
      else {
        size = iconSize;
      }
      var dst = Rect { .x = widget.paddingLeft(); .y = widget.paddingTop(); .w = size.w; .h = size.h; };
      switch (iconPosition) {
        case Direction::Left:
          dst { .y = widget.height*0.5-size.h*0.5; };
        case Direction::Top:
          dst { .x = widget.width*0.5-size.w*0.5; };
      }
      g.drawImageEx(icon, src, dst);
  }

  override fun doPaint(widget: *Widget , g:& Graphics)
  {
    if (!backgroundImage.uri.isEmpty()) {
      drawBackgroundImage(widget, g);
    }

    var btn = widget as * Button;
    btn.icon.loadImage(g);

    //draw icon
    var hasCheckedIcon = false;
    if (btn is *ToggleButton) {
      var tb = btn as * ToggleButton;
      tb.checkedIcon.loadImage(g);
      if (tb.checked) {
        if (tb.checkedIcon.image != null && tb.checkedIcon.image.isReady()) {
          hasCheckedIcon = true;
          drawIcon(widget, g, tb.checkedIcon.image, btn.iconSize, btn.iconPosition);
        }
        else {
          g.setColor(selectedColor);
          var arc = roundRadius;
          g.fillRoundRect(0, 0, widget.width, widget.height, arc);
        }
      }
    }

    if (!hasCheckedIcon && btn.icon.image != null) {
      drawIcon(widget, g, btn.icon.image, btn.iconSize, btn.iconPosition);
    }

    //draw mouse down mask
    if (btn.state == Button::mouseDown) {
        g.setColor(background);
        g.globalAlpha(100/255.0);
        g.fillRect(0, 0, widget.width, widget.height);
        g.globalAlpha(1.0);
    }

    //draw ripple
    if (btn.rippleSize > 0.0) {
        g.setColor(rippleColor);
        var r = (btn.rippleSize * (100+btn.width)) as Int;
        var alpha = ((1-btn.rippleSize));
        if (alpha > 200/255.0) alpha = 200/255.0;
        g.globalAlpha(alpha);
        var w = r+r;
        g.fillOval(btn.ripplePoint.x-r, btn.ripplePoint.y-r, w, w);
        g.globalAlpha(1.0);
    }

    //draw text
    var vAlign: Align = Align::Center;
    switch (btn.iconPosition) {
        case Direction::Left:
        case Direction::Top:
          vAlign = Align::End;
    }
    drawText(widget, g, btn.text, btn.textAlign, vAlign);
  }
}