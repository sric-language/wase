import sric::*;
import waseGui::*;
import waseGraphics::*;

struct Canvas : Widget {

  var image0 : own*? Image;
  // var image1 : own*? Image;
  // var image2 : own*? Image;
  // var image3 : own*? Image;
  var image4 : own*? Image;
  var inited : Bool = false;

  fun new() {
  }

  override protected fun doPaint( clip: &Rect,  canvas: &Graphics) {

      if (image0 == null) {
        image0 = canvas.createImage() { .load("res/image.png"); };
        image4 = canvas.createImage() { .load("res/image.png"); };
      }

      if (!inited && image0.isReady() && image4.isReady()) {
        inited = true;
        // var c = image0.getPixel(76, 30)
        // echo(c.toHex)


        // image1 = Image.make(Size(300, 300))
        // image1.paint |g| {
        //   g.drawRect(0, 0, 10, 10)
        // }


        // image2 = Image.make(Size(300, 300))
        // for (i:= 0; i<100; ++i) {
        //   image2.setPixel(i, i, 0xFF_CC_88_00)
        // }
        // c0 := image2.getPixel(1, 1)
        // if (c0 != 0xFF_CC_88_00) {
        //   echo("ERROR:$c0.toHex")
        // }


        // image3 = Image.make(Size(300, 300))
        // image3.paint |g| {
        //   g.drawImage(image0, 0, 0)
        //   g.drawRect(0, 0, 10, 10)
        // }
        // for (i:= 0; i<100; ++i) {
        //   image3.setPixel(i, i, 0xFF_CC_88_00)
        // }
        // c3 := image3.getPixel(76, 30)
        // echo(c3.toHex)

        // for (i:= 0; i<100; ++i) {
        //   image4.setPixel(i, i, 0xFF_CC_88_00)
        // }
      }

      //if (!inited) return;

      canvas.drawImage(image0, 0, 0);
      // canvas.drawImage(image1, 300, 0);
      // canvas.drawImage(image2, 0, 300);
      // canvas.drawImage(image3, 300, 300);
      canvas.drawImage(image4, 0, 600);

      //canvas.pen = Pen { it.width = 4 }
      canvas.strokeWidth(2.0);
      canvas.setColor(Color { .rgba = 0xff0000ff; });
      canvas.drawLine(0, 300, 600, 300);
      canvas.drawLine(300, 0, 300, 600);

      canvas.setFontSize(66);

      var metric: FontMetrics;
      canvas.fontMetrics(metric);
      var lineh = metric.height;
      var offset = metric.ascent;

      canvas.strokeWidth(2.0);
      canvas.drawLine(250, 300+lineh, 250+canvas.textWidth("Hi", -1), 300+lineh);

      canvas.setColor(Color { .rgba = 0x00ff00ff; });
      canvas.drawLine(250, 300+offset, 250+canvas.textWidth("Hi", -1), 300+offset);

      canvas.setColor(Color { .rgba = 0x0000ffff; });
      canvas.drawText(250, 300+offset, "Hi", -1);
  }
}

struct GraphicsTest : BasePage
{
  protected override fun view(): own* Widget {
    return new Canvas
    {
      .layout.width = Layout::matchParent;
      .layout.height = Layout::matchParent;
    };
  }
}